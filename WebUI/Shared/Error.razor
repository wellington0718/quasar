@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;

@inject ILogger logger
@inject IToastService toastService
@inject IWebHostEnvironment env

<CascadingValue Value=this>
    @ChildContent
</CascadingValue>

<style>

    .message p {
        margin: 8px 0;
    }
</style>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Inject]
    private DialogService? DialogService { get; set; }
    public void ProcessError(Exception ex)
    {
        toastService.ClearErrorToasts();

        var baseException = ex.GetBaseException();
        var trace = baseException.StackTrace;
        var message = baseException.Message;
        var type = baseException.GetType();

        RenderFragment error =
    @<text>
        <div class="message">
            <p><strong>Type:</strong> @type</p>
            <p><strong>Message:</strong> @message</p>
            <p><strong>Stack trace:</strong> @trace</p>
        </div>
        <p><strong>See the logs</strong></p>

        </text>
    ;

        if (env.IsDevelopment())
        {
            toastService.ShowError(error);
        }
        else
        {
            toastService.ShowError("oops, we're sorry. Something has gone wrong. Please contact IT Department.");
        }
        DialogService.Close();
        //logger.Error("\n Type: {type} \n Message: {message} \n Stack Trace: {trace} \n", type, message, trace);
        Log.CloseAndFlush();
    }
}